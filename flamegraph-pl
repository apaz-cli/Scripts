#!/bin/sh

# If not enabled, ask permission from the user to enable perf events
PERF_LEVEL="$(cat /proc/sys/kernel/perf_event_paranoid)"
if [ "$PERF_LEVEL" -gt 0 ]; then
  printf "Run 'sudo sysctl -w kernel.perf_event_paranoid=0' to enable perf? (y/N): "
  read RESPONSE
  case "$RESPONSE" in
    [Yy]*)
        # Enable perf events, as requested
        echo 0 | sudo tee /proc/sys/kernel/perf_event_paranoid > /dev/null
        echo "Perf enabled."
        ;;
    *)
        echo "Operation cancelled."
        exit 0
        ;;
  esac
fi

# Clone the flamegraph repo if it doesn't exist
REPO_PATH="/tmp/FlameGraph"
if [ ! -d "$REPO_PATH" ]; then
  WD="$(pwd)"
  git clone --depth=1 https://github.com/brendangregg/FlameGraph /tmp/FlameGraph
  echo "Flamegraph installed in /tmp."
fi

# Create a temp dir
TITLE="$@"
TMP="$(mktemp -d /tmp/FlameGraph.XXXXXX)"
DATA="$TMP/perf.data"
FOLDED="$TMP/out.perf-folded"
SVG="$TMP/perf.svg"

# Run the program to collect perf data
perf record -o "$DATA" -F 15500 -g --call-graph dwarf $@ 2>/dev/null >/dev/null
if [ $? -ne 0 ]; then
  echo "Failed to run perf record for: " $@
  exit 1
fi

# Fold and filter the perf data for the flamegrpah script
perf script -i "$DATA" | "$REPO_PATH/stackcollapse-perf.pl" > "$FOLDED" 2>/dev/null 
if [ $? -ne 0 ]; then
  echo "The stackcollapse-perf script failed."
  exit 1
fi

# Generate a flamegraph from the folded perf data
"$REPO_PATH/flamegraph.pl" --title="$TITLE" "$FOLDED" > "$SVG"
if [ $? -ne 0 ]; then
  echo "Flamegraph script failed for $FOLDED"
  exit 1
fi

# Open the flamegraph in firefox
firefox "$SVG"
