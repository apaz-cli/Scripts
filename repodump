#!/usr/bin/env python3
"""
Repository Content Dumper

This script traverses a repository directory and outputs all text-based files
in a format suitable for feeding into a language model.

Usage:
    ./repo_dump.py /path/to/repository [--exclude-dirs=dir1,dir2] [--exclude-exts=ext1,ext2] [--max-file-size=N]

Options:
    --exclude-dirs    Comma-separated list of directories to exclude (default: .git,node_modules,venv,.venv)
    --exclude-exts    Comma-separated list of file extensions to exclude (default: .pyc,.jpg,.jpeg,.png,.gif,.zip,.tar)
    --max-file-size   Maximum file size in KB to include (default: 1000)
"""

import os
import sys
import argparse
from pathlib import Path
import mimetypes

def is_text_file(file_path, max_file_size_kb):
    """Check if a file is likely to be a text file based on its mimetype and size."""
    # Check file size first
    file_size_kb = os.path.getsize(file_path) / 1024
    if file_size_kb > max_file_size_kb:
        return False

    # Try to guess mimetype
    mime_type, _ = mimetypes.guess_type(file_path)

    # If mime_type is None or can't be determined, try reading a sample
    if mime_type is None:
        try:
            with open(file_path, 'rb') as f:
                sample = f.read(1024)
                try:
                    sample.decode('utf-8')
                    return True
                except UnicodeDecodeError:
                    return False
        except (IOError, PermissionError):
            return False

    # Check if the mime type starts with 'text/'
    return mime_type is not None and mime_type.startswith('text')

def dump_repo_contents(repo_path, exclude_dirs, exclude_exts, max_file_size_kb):
    """Recursively traverse a repository and output the contents of text files."""
    repo_path = os.path.abspath(repo_path)

    # Initialize mimetypes
    mimetypes.init()

    for root, dirs, files in os.walk(repo_path):
        # Skip excluded directories
        dirs[:] = [d for d in dirs if d not in exclude_dirs]

        for file in files:
            file_path = os.path.join(root, file)

            # Skip excluded file extensions
            if any(file.endswith(ext) for ext in exclude_exts):
                continue

            if is_text_file(file_path, max_file_size_kb):
                try:
                    rel_path = os.path.relpath(file_path, repo_path)

                    # Print file path as a header
                    print(f"\n{'='*80}")
                    print(f"FILE: {rel_path}")
                    print(f"{'='*80}\n")

                    # Print file contents
                    with open(file_path, 'r', encoding='utf-8', errors='replace') as f:
                        print(f.read())

                except (IOError, PermissionError, UnicodeDecodeError) as e:
                    print(f"\n{'='*80}")
                    print(f"ERROR reading {os.path.relpath(file_path, repo_path)}: {str(e)}")
                    print(f"{'='*80}\n")

def main():
    parser = argparse.ArgumentParser(description='Dump repository contents for feeding into a language model.')
    parser.add_argument('repo_path', help='Path to the repository')
    parser.add_argument('--exclude-dirs', default='.git,node_modules,venv,.venv,__pycache__,dist,build',
                        help='Comma-separated list of directories to exclude')
    parser.add_argument('--exclude-exts', default='.pyc,.jpg,.jpeg,.png,.gif,.zip,.tar,.gz,.rar,.exe,.dll,.so,.dylib,.obj,.o,.class',
                        help='Comma-separated list of file extensions to exclude')
    parser.add_argument('--max-file-size', type=int, default=1000,
                        help='Maximum file size in KB to include')
    args = parser.parse_args()

    exclude_dirs = set(args.exclude_dirs.split(','))
    exclude_exts = set(args.exclude_exts.split(','))

    if not os.path.isdir(args.repo_path):
        print(f"Error: {args.repo_path} is not a valid directory")
        sys.exit(1)

    dump_repo_contents(args.repo_path, exclude_dirs, exclude_exts, args.max_file_size)

if __name__ == '__main__':
    main()
