#if 0

# Run as a bash script.

# Create a temp dir to compile into and run out of.
TMP="$(mktemp -d /tmp/cshebang.XXXXXXXXX)"

cc -o "$TMP/a.out" -x c "$0" -O3 -lpthread && "$TMP/a.out" $@;

RVAL=$?;
rm -rf "$TMP";
exit $RVAL

#endif


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/stat.h>
#include <unistd.h>
#include <limits.h>

// Template C program
const char *template_code = "#include <stdio.h>\n"
                            "#include <stdlib.h>\n"
                            "\n"
                            "int main(int argc, char *argv[]) {\n"
                            "    \n"
                            "}\n";

int file_exists(const char *filename) {
  struct stat buffer;
  return stat(filename, &buffer) == 0;
}

int main(int argc, char *argv[]) {
  char *temp_dir = (char*)malloc(PATH_MAX * sizeof(char));
  char *c_file = (char*)malloc(PATH_MAX * sizeof(char));
  char *compile_cmd = (char*)malloc(PATH_MAX * sizeof(char));
  char *run_cmd = (char*)malloc(PATH_MAX * sizeof(char));
  char *nano_cmd = (char*)malloc(PATH_MAX * sizeof(char));
  char *output_file = (char*)malloc(PATH_MAX * sizeof(char));

  if (!temp_dir || !c_file || !compile_cmd || !run_cmd || !nano_cmd || !output_file) {
    fprintf(stderr, "Memory allocation failed\n");
    return 1;
  }

  if (argc > 1) {
    // Use provided program name
    snprintf(temp_dir, PATH_MAX, "/tmp/cshebang.%s", argv[1]);
    snprintf(c_file, PATH_MAX, "%s/%s.c", temp_dir, argv[1]);
  } else {
    // Create temporary directory
    FILE *temp = popen("mktemp -d /tmp/cshebang.XXXXXXXXX", "r");
    if (!temp) {
      fprintf(stderr, "Failed to create temporary directory\n");
      return 1;
    }
    fgets(temp_dir, PATH_MAX, temp);
    temp_dir[strcspn(temp_dir, "\n")] = 0; // Remove newline
    pclose(temp);

    snprintf(c_file, PATH_MAX, "%s/temp.c", temp_dir);
  }

  // Create directory if it doesn't exist
  mkdir(temp_dir, 0755);

  // Create C file with template if it doesn't exist
  if (!file_exists(c_file)) {
    FILE *fp = fopen(c_file, "w");
    if (!fp) {
      fprintf(stderr, "Failed to create C file\n");
      return 1;
    }
    fprintf(fp, "%s", template_code);
    fclose(fp);
  }

  // Open file in nano
  snprintf(nano_cmd, PATH_MAX, "nano %s", c_file);
  system(nano_cmd);

  // Get output file name
  snprintf(output_file, PATH_MAX, "%s/%s", temp_dir,
           argc > 1 ? argv[1] : "temp");

  // Compile
  snprintf(compile_cmd, PATH_MAX, "gcc -o %s %s", output_file, c_file);
  if (system(compile_cmd) != 0) {
    fprintf(stderr, "Compilation failed\n");
    return 1;
  }

  // Run
  snprintf(run_cmd, PATH_MAX, "%s", output_file);
  printf("\n--- Program Output ---\n");
  system(run_cmd);

  return 0;
}
