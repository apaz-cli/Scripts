#!/usr/bin/env python3
"""
Remove trailing whitespace from text files.

Usage:
    python strip_whitespace.py [path] [--dry]

Arguments:
    path        Directory or file path (default: current directory)
    --dry       Show diff without modifying files
"""

import argparse
import os
import sys
import mimetypes
from pathlib import Path
from typing import List, Tuple, Optional
import difflib

# ANSI color codes
class Colors:
    RED = '\033[91m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    CYAN = '\033[96m'
    RESET = '\033[0m'
    BOLD = '\033[1m'
    RED_BG = '\033[41m'  # Red background

def is_text_file(filepath: Path) -> bool:
    """Check if file is likely a text file using mimetype."""
    # First try mimetype
    mime_type, _ = mimetypes.guess_type(str(filepath))
    if mime_type and mime_type.startswith('text/'):
        return True

    # Common text file extensions that might not be recognized
    text_extensions = {
        '.txt', '.md', '.py', '.js', '.html', '.css', '.json', '.xml',
        '.yaml', '.yml', '.ini', '.cfg', '.conf', '.sh', '.bash', '.zsh',
        '.c', '.cpp', '.h', '.hpp', '.java', '.rs', '.go', '.rb', '.php',
        '.sql', '.r', '.R', '.tex', '.log', '.csv', '.tsv', '.rst', '.adoc',
        '.vim', '.el', '.lisp', '.clj', '.scala', '.kt', '.swift', '.m',
        '.pl', '.pm', '.t', '.pod', '.lua', '.tcl', '.awk', '.sed',
        '.dockerfile', '.gitignore', '.editorconfig', '.env', '.properties',
        '.toml', '.lock', '.gemspec', '.rakefile', '.makefile', '.cmake',
        '.gradle', '.sbt', '.cabal', '.nimble', '.cr', '.jl', '.v', '.zig'
    }

    if filepath.suffix.lower() in text_extensions:
        return True

    # Files without extension that are usually text
    if filepath.name in {'Makefile', 'Dockerfile', 'Jenkinsfile', 'Rakefile',
                         'Gemfile', 'Guardfile', 'Capfile', 'Thorfile', 'Vagrantfile',
                         'Berksfile', 'Cheffile', 'Jugfile', 'Procfile', 'README',
                         'LICENSE', 'CHANGELOG', 'AUTHORS', 'CONTRIBUTORS', 'TODO',
                         'INSTALL', 'NEWS', 'HISTORY', 'NOTICE', 'MANIFEST'}:
        return True

    # Try to read a small portion to check if it's text
    try:
        with open(filepath, 'rb') as f:
            chunk = f.read(512)
            # Check for null bytes (binary indicator)
            if b'\x00' in chunk:
                return False
            # Try to decode as UTF-8
            try:
                chunk.decode('utf-8')
                return True
            except UnicodeDecodeError:
                # Try other common encodings
                for encoding in ['latin-1', 'cp1252', 'ascii']:
                    try:
                        chunk.decode(encoding)
                        return True
                    except UnicodeDecodeError:
                        continue
    except Exception:
        return False

    return False

def strip_trailing_whitespace(content: str) -> str:
    """Remove trailing whitespace from each line."""
    lines = content.splitlines(keepends=True)
    stripped_lines = []

    for line in lines:
        if line.endswith('\n'):
            stripped_lines.append(line.rstrip() + '\n')
        elif line.endswith('\r\n'):
            stripped_lines.append(line.rstrip() + '\r\n')
        else:
            # Last line without newline
            stripped_lines.append(line.rstrip())

    return ''.join(stripped_lines)

def get_colored_diff(original: str, modified: str, filename: str) -> Optional[str]:
    """Generate colored diff between original and modified content."""
    if original == modified:
        return None

    original_lines = original.splitlines(keepends=True)
    modified_lines = modified.splitlines(keepends=True)

    diff_lines = []
    diff_lines.append(f"{Colors.BOLD}{Colors.CYAN}--- {filename}{Colors.RESET}")
    diff_lines.append(f"{Colors.BOLD}{Colors.CYAN}+++ {filename} (stripped){Colors.RESET}")

    # Generate unified diff
    diff = difflib.unified_diff(
        original_lines,
        modified_lines,
        n=3,
        lineterm=''
    )

    # Skip the first two lines (file headers)
    for _ in range(2):
        next(diff, None)

    for line in diff:
        if line.startswith('@@'):
            diff_lines.append(f"{Colors.BLUE}{line}{Colors.RESET}")
        elif line.startswith('-'):
            # Highlight trailing whitespace in removed lines
            visible_part = line.rstrip()
            whitespace_part = line[len(visible_part):]
            if whitespace_part and whitespace_part != '\n':
                # Show actual whitespace with red background, use escape sequences for non-printables
                whitespace_visual = ''
                for char in whitespace_part:
                    if char == ' ':
                        whitespace_visual += f"{Colors.RED_BG} {Colors.RESET}"
                    elif char == '\t':
                        whitespace_visual += f"{Colors.RED_BG}\\t{Colors.RESET}"
                    elif char == '\r':
                        whitespace_visual += f"{Colors.RED_BG}\\r{Colors.RESET}"
                    elif char == '\n':
                        continue  # Don't show newline
                    elif char == '\v':
                        whitespace_visual += f"{Colors.RED_BG}\\v{Colors.RESET}"
                    elif char == '\f':
                        whitespace_visual += f"{Colors.RED_BG}\\f{Colors.RESET}"
                    else:
                        # For any other non-printable character, show its repr
                        whitespace_visual += f"{Colors.RED_BG}{repr(char)[1:-1]}{Colors.RESET}"
                diff_lines.append(f"{Colors.RED}{visible_part}{Colors.RESET}{whitespace_visual}")
            else:
                diff_lines.append(f"{Colors.RED}{line.rstrip()}{Colors.RESET}")
        elif line.startswith('+'):
            diff_lines.append(f"{Colors.GREEN}{line.rstrip()}{Colors.RESET}")
        else:
            diff_lines.append(line.rstrip())

    return '\n'.join(diff_lines) if len(diff_lines) > 2 else None

def process_file(filepath: Path, dry_run: bool = False) -> Tuple[bool, Optional[str]]:
    """
    Process a single file to remove trailing whitespace.

    Returns:
        (modified, diff_output) - modified is True if file had trailing whitespace
    """
    try:
        # Try to detect encoding
        encodings = ['utf-8', 'latin-1', 'cp1252', 'ascii']
        content = None
        used_encoding = None

        for encoding in encodings:
            try:
                with open(filepath, 'r', encoding=encoding) as f:
                    content = f.read()
                    used_encoding = encoding
                    break
            except UnicodeDecodeError:
                continue

        if content is None:
            return False, f"Error: Could not decode {filepath}"

        # Strip trailing whitespace
        stripped_content = strip_trailing_whitespace(content)

        if content == stripped_content:
            return False, None

        if dry_run:
            # Generate colored diff
            diff_output = get_colored_diff(content, stripped_content, str(filepath))
            return True, diff_output
        else:
            # Write the stripped content back
            with open(filepath, 'w', encoding=used_encoding) as f:
                f.write(stripped_content)
            return True, None

    except Exception as e:
        return False, f"Error processing {filepath}: {str(e)}"

def process_directory(path: Path, dry_run: bool = False) -> List[Tuple[Path, bool, Optional[str]]]:
    """Process all text files in a directory recursively."""
    results = []

    for root, _, files in os.walk(path):
        for filename in files:
            filepath = Path(root) / filename

            # Skip hidden files and directories
            if any(part.startswith('.') for part in filepath.parts):
                continue

            # Check if it's a text file
            if is_text_file(filepath):
                modified, output = process_file(filepath, dry_run)
                results.append((filepath, modified, output))

    return results

def main():
    parser = argparse.ArgumentParser(
        description='Remove trailing whitespace from text files.',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""Examples:
  %(prog)s                          # Process current directory
  %(prog)s myfile.txt               # Process single file
  %(prog)s /path/to/dir             # Process directory
  %(prog)s file1.txt file2.py       # Process multiple files
  %(prog)s dir1/ dir2/ file.txt     # Process multiple paths
  %(prog)s --dry                    # Dry run on current directory
  %(prog)s myfile.txt --dry         # Dry run on single file
"""
    )

    parser.add_argument(
        'paths',
        nargs='*',
        default=['.'],
        help='File or directory paths (default: current directory)'
    )

    parser.add_argument(
        '--dry',
        action='store_true',
        help='Show diff without modifying files'
    )

    args = parser.parse_args()

    all_results = []
    all_modified_files = []
    
    for path_str in args.paths:
        path = Path(path_str).resolve()

        if not path.exists():
            print(f"Error: Path '{path}' does not exist", file=sys.stderr)
            continue

        # Process single file or directory
        if path.is_file():
            if not is_text_file(path):
                print(f"Warning: {path} does not appear to be a text file", file=sys.stderr)
                continue

            modified, output = process_file(path, args.dry)

            if args.dry:
                if modified and output:
                    print(output)
                    print(f"\n{Colors.YELLOW}Would strip trailing whitespace from: {path}{Colors.RESET}")
                    all_modified_files.append((path, output))
                else:
                    print(f"{Colors.GREEN}No trailing whitespace in: {path}{Colors.RESET}")
            else:
                if modified:
                    print(f"{Colors.GREEN}✓ Stripped trailing whitespace from: {path}{Colors.RESET}")
                    all_modified_files.append((path, None))
                else:
                    print(f"No changes needed for: {path}")
            
            all_results.append((path, modified, output))

        else:  # Directory
            print(f"Processing directory: {path}")
            results = process_directory(path, args.dry)

            if not results:
                print("No text files found in directory.")
                continue

            modified_files = [(f, o) for f, m, o in results if m]
            all_modified_files.extend(modified_files)
            all_results.extend(results)

            if args.dry:
                if modified_files:
                    print(f"\n{Colors.BOLD}Files with trailing whitespace in {path}:{Colors.RESET}\n")
                    for filepath, output in modified_files:
                        if output:
                            print(output)
                            print()
                else:
                    print(f"{Colors.GREEN}No files with trailing whitespace found in {path}.{Colors.RESET}")
            else:
                if modified_files:
                    for filepath, _ in modified_files:
                        print(f"{Colors.GREEN}✓ Stripped: {filepath}{Colors.RESET}")
                else:
                    print(f"No files needed modification in {path}.")

            # Summary for this directory
            total_files = len(results)
            print(f"Processed {total_files} text file(s) in {path}")

    # Overall summary
    if len(args.paths) > 1:
        print(f"\n{Colors.BOLD}Overall Summary:{Colors.RESET}")
        if args.dry:
            if all_modified_files:
                print(f"{Colors.YELLOW}Would strip trailing whitespace from {len(all_modified_files)} file(s) total{Colors.RESET}")
            else:
                print(f"{Colors.GREEN}No files with trailing whitespace found.{Colors.RESET}")
        else:
            if all_modified_files:
                print(f"{Colors.BOLD}Modified {len(all_modified_files)} file(s) total{Colors.RESET}")
            else:
                print("No files needed modification.")
        
        total_processed = len(all_results)
        print(f"Processed {total_processed} text file(s) total")

if __name__ == '__main__':
    main()
