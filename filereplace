#!/usr/bin/env python
import sys
import os
import glob

USAGE = '''
Usage: filereplace [-v] <path> <pattern> <replacement>

Replace occurrences of <pattern> with <replacement> in file(s) at <path>.

Arguments:
  -v          Verbose mode. Print additional information during execution.
  <path>      File or directory path. If a directory, processes all files recursively.
  <pattern>   The string pattern to search for in the file(s).
  <replacement>  The string to replace the pattern with.

Examples:
  filereplace myfile.txt "old text" "new text"
  filereplace -v ./mydir "error" "warning"

Note: This script modifies files in-place. Make sure to backup important files before use.
'''

def replace(file_path, pattern, subst, verbose=False):
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            content = file.read()
        
        new_content = content.replace(pattern, subst)
        
        if new_content != content:
            with open(file_path, 'w', encoding='utf-8') as file:
                file.write(new_content)
            if verbose:
                print(f'Replaced all instances of "{pattern}" with "{subst}" in {file_path}')
            return True
        return False
    except Exception as e:
        print(f"Error processing {file_path}: {str(e)}")
        return False

def main():
    if len(sys.argv) < 4:
        print(USAGE)
        sys.exit(1)

    verbose = False
    args = sys.argv[1:]
    if args[0] == '-v':
        verbose = True
        args.pop(0)

    path, pattern, replacement = args

    files = glob.glob(path + '/**', recursive=True) if os.path.isdir(path) else [path]
    files = [f for f in files if os.path.isfile(f)]

    if verbose:
        print(f"Found {len(files)} target files.")

    for file_path in files:
        if verbose:
            print(f"Processing file: {file_path}")
        replace(file_path, pattern, replacement, verbose)

if __name__ == "__main__":
    main()
